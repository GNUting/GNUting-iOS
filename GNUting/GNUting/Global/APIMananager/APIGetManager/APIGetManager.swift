//
//  APIGetManager.swift
//  GNUting
//
//  Created by ÏõêÎèôÏßÑ on 3/12/24.
//
// ‚úÖ : Î∂ÑÍ∏∞ Ï≤òÎ¶¨ ÏôÑÎ£å
import Foundation

import Alamofire

class APIGetManager: RequestInterceptor {
    static let shared = APIGetManager()
    
    // MARK: - ÌöåÏõê Í∞ÄÏûÖ : ÎãâÎÑ§ÏûÑ Ï§ëÎ≥µÌôïÏù∏ ‚úÖ
    func checkNickname(nickname: String, completion: @escaping(NicknameCheckModel?,Int) -> Void) {
        let url = EndPoint.checkNickname.url
        let parameters : [String : String] = ["nickname": nickname]
        AF.request(url,method: .get,parameters: parameters,encoding: URLEncoding.default)
            .responseDecodable(of: NicknameCheckModel.self){ response in
                guard let statusCode = response.response?.statusCode else { return }
                
                switch statusCode {
                case 200..<300:
                    print("üü¢ checkNickname Success:\(statusCode)")
                    completion(response.value,statusCode)
                default:
                    guard let data = response.value else { return }
                    print("üî¥ checkNickname Data: \(data)")
                    completion(data,statusCode)
                }
            }
    }
    
    // MARK: - ÌöåÏõêÍ∞ÄÏûÖ : ÌïôÍ≥º Í≤ÄÏÉâ ‚úÖ ÏóÜÎäîÍ≤É Í≤ÄÏÉâÌïòÎ©¥ Îç∞Ïù¥ÌÑ∞ ÏïàÎÇòÏò¥
    func searchMajor(major: String,completion:@escaping(SearchMajorModel?,Int) -> Void) { // ÌïôÍ≥ºÍ≤ÄÏÉâ
        let url = EndPoint.searchMajor.url
        let parameters: [String:Any] = ["name": major]
        AF.request(url,method: .get,parameters: parameters,encoding: URLEncoding.default)
            .responseDecodable(of: SearchMajorModel.self) { response in
                guard let statusCode = response.response?.statusCode else { return }
                switch statusCode {
                case 200..<300:
                    print("üü¢ searchMajor Success:\(statusCode)")
                    completion(response.value,statusCode)
                default:
                    print("üî¥ searchMajor Data:\(statusCode)")
                    completion(response.value,statusCode)
                    break
                }
            }
    }
    
    // MARK: - ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ‚úÖ ÏóêÎü¨Î©îÏãúÏßÄ Ï∂úÎ†•
    func getUserData(completion: @escaping(GetUserDataModel?,DefaultResponse?) -> Void) {
        let url = EndPoint.getUserData.url
        
        AF.request(url,method: .get,interceptor: APIInterceptorManager())
            .validate(statusCode: 200..<300)
            .responseDecodable(of: GetUserDataModel.self) { response in
                guard let statusCode = response.response?.statusCode, let data = response.data else { return }
                guard let json = try? JSONDecoder().decode(DefaultResponse.self, from: data) else { return }
                switch response.result {
                case .success:
                    print("üü¢ getUserData statusCode :\(statusCode)")
                    completion(response.value,nil)
                case .failure:
                    print("üî¥ getUserData statusCode :\(statusCode)")
                    
                    completion(response.value,json)
                    break
                }
            }
    }
    // MARK: - Í≤åÏãúÍ∏Ä : Î™®Îì† Í≤åÏãúÎ¨º Î≥¥Í∏∞ ‚úÖ ÏóêÎü¨Î©îÏãúÏßÄ Ï∂úÎ†•
    
    func getBoardText(page:Int, size: Int, completion: @escaping(BoardModel?,DefaultResponse?)-> Void) {
        let url = EndPoint.getBoardData.url
        
        let parameters: [String:Any] = ["page": page, "size": size]
        AF.request(url,method: .get,parameters: parameters,encoding: URLEncoding.default,interceptor: APIInterceptorManager())
            .validate(statusCode: 200..<300)
            .responseDecodable(of:BoardModel.self) { response in
                guard let statusCode = response.response?.statusCode, let data = response.data else { return }
                guard let json = try? JSONDecoder().decode(DefaultResponse.self, from: data) else { return }
                switch response.result {
                case .success:
                    print("üü¢ getBoardText statusCode: \(statusCode)")
                    completion(response.value,json)
                case .failure:
                    print("üî¥ getBoardText statusCode: \(statusCode)")
                    completion(response.value,json)
                    break
                }
            }
    }
    

    // MARK: - Í≤åÏãúÍ∏Ä : Í≤ÄÏÉâ ‚úÖ ÏóêÎü¨Î©îÏãúÏßÄ Ï∂úÎ†•
    func getSearchBoardText(searchText: String,page: Int, completion: @escaping(SearchBoardTextModel?,DefaultResponse?)->Void) {
        let url = EndPoint.searchGetBoardData.url
        let parameters: [String:Any] = ["keyword": searchText,"page": page]
        AF.request(url,method: .get,parameters: parameters,encoding: URLEncoding.default,interceptor: APIInterceptorManager())
            .validate(statusCode: 200..<300)
            .responseDecodable(of:SearchBoardTextModel.self) { response in
                guard let statusCode = response.response?.statusCode, let data = response.data else { return }
                guard let json = try? JSONDecoder().decode(DefaultResponse.self, from: data) else { return }
                
                switch response.result {
                case .success:
                    print("üü¢ getSearchBoardText statusCode: \(statusCode)")
                    completion(response.value,json)
                case .failure:
                    print("üî¥ getSearchBoardText statusCode: \(statusCode)")
                    completion(response.value,json)
                    break
                }
            }
    }
    
    // MARK: - Í≤åÏãúÍ∏Ä : ÎÇ¥ Í∏Ä Ï†ïÎ≥¥ ‚úÖ ÏóêÎü¨Î©îÏãúÏßÄ Ï∂úÎ†•
    
    func getMyPost(completion: @escaping(MyPostModel?,DefaultResponse?) -> Void) {
        let url = EndPoint.mypost.url
        
        AF.request(url,method: .get,interceptor: APIInterceptorManager())
            .validate(statusCode: 200..<300)
            .responseDecodable(of:MyPostModel.self) { response in
                guard let statusCode = response.response?.statusCode, let data = response.data else { return }
                guard let json = try? JSONDecoder().decode(DefaultResponse.self, from: data) else { return }
                
                switch response.result {
                case .success:
                    print("üü¢ getMyPost statusCode: \(statusCode)")
                    completion(response.value,json)
                case .failure:
                    print("üî¥ getMyPost statusCode: \(statusCode)")
                    completion(response.value,json)
                    break
                }
            }
    }
    
    // MARK: - Í≤åÏãúÎ¨º : Detail ‚úÖ  ÏøºÎ¶¨ÌååÎùºÎØ∏ÌÑ∞Î°ú idÍ∞íÎÑ£ÏúºÎ©¥ ÏïàÎê®
    
    func getBoardDetail(id: Int, completion: @escaping(BoardDetailModel?,DefaultResponse?) -> Void) {
        let urlString = BaseURL.shared.urlString + "board/\(id)"
        guard let url = URL(string: urlString) else { return }
        
        AF.request(url,method: .get,interceptor: APIInterceptorManager())
            .validate(statusCode: 200..<300)
            .responseDecodable(of:BoardDetailModel.self){ response in
                guard let statusCode = response.response?.statusCode, let data = response.data else { return }
                guard let json = try? JSONDecoder().decode(DefaultResponse.self, from: data) else { return }
     
                switch response.result {
                case .success:
                    print("üü¢ getBoardDetail statusCode: \(statusCode)")
                    completion(response.value,json)
                case .failure:
                    print("üî¥ getBoardDetail statusCode: \(statusCode)")
                    completion(response.value,json)
                    break
                }
            }
    }
    
    // MARK: - Ïã†Ï≤≠ ÌòÑÌô©: Ïã†Ï≤≠Î∞õÏùÄ Î™©Î°ù ‚úÖ
    
    func getReceivedChatState(completion: @escaping(ApplicationStatusModel?,DefaultResponse?)->Void) {
        let url = EndPoint.receivedState.url
        
        AF.request(url,method: .get,interceptor: APIInterceptorManager())
            .validate(statusCode: 200..<300)
            .responseDecodable(of:ApplicationStatusModel.self) { response in
                guard let statusCode = response.response?.statusCode, let data = response.data else { return }
                guard let json = try? JSONDecoder().decode(DefaultResponse.self, from: data) else { return }
     
                switch response.result {
                case .success:
                    print("üü¢ getReceivedChatState statusCode: \(statusCode)")
                    completion(response.value,json)
                case .failure:
                    print("üî¥ getReceivedChatState statusCode: \(statusCode)")
                    completion(response.value,json)
                    break
                }
            }
    }
    
    // MARK: - Ïã†Ï≤≠ ÌòÑÌô©: Ïã†Ï≤≠ Î™©Î°ù ‚úÖ
    
    func getRequestChatState(completion: @escaping(ApplicationStatusModel?,DefaultResponse?)->Void) {
        let url = EndPoint.requestStatus.url
        
        AF.request(url,method: .get,interceptor: APIInterceptorManager())
            .responseDecodable(of:ApplicationStatusModel.self) { response in
                guard let statusCode = response.response?.statusCode, let data = response.data else { return }
                guard let json = try? JSONDecoder().decode(DefaultResponse.self, from: data) else { return }
     
                switch response.result {
                case .success:
                    print("üü¢ getRequestChatState statusCode: \(statusCode)")
                    completion(response.value,json)
                case .failure:
                    print("üî¥ getRequestChatState statusCode: \(statusCode)")
                    completion(response.value,json)
                    break
                }
            }
    }
    
    
    // MARK: - ÏÇ¨Ïö©Ïûê Í≤ÄÏÉâ ‚úÖ
    
    func getSearchUser(searchNickname: String, completion:@escaping(SearchUserModel?,DefaultResponse?)-> Void) {
        let url = EndPoint.searchGetUserData.url
        
        let parameters: [String:Any] = ["nickname": searchNickname]
        AF.request(url,method: .get,parameters: parameters,encoding: URLEncoding.default,interceptor: APIInterceptorManager())
            .responseDecodable(of: SearchUserModel.self) { response in
                guard let statusCode = response.response?.statusCode, let data = response.data else { return }
                guard let json = try? JSONDecoder().decode(DefaultResponse.self, from: data) else { return }
     
                switch response.result {
                case .success:
                    print("üü¢ getSearchUser statusCode: \(statusCode)")
                    completion(response.value,json)
                case .failure:
                    print("üî¥ getSearchUser statusCode: \(statusCode)")
                    completion(response.value,json)
                    break
                }        }
    }
    
}

